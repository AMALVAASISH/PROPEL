interface IPayload{
    massKg: number;
}

class Astronaut implements IPayload{
    massKg: number=0;
    name: string='';
    constructor(massKg: number, name: string){
        this.massKg = massKg;
        this.name = name;
    }
}

class Cargo implements IPayload{
    massKg: number;
    material : string;
    constructor(massKg: number, material: string){
        this.massKg = massKg;
        this.material = material;
    }
}

class Rocket implements IPayload{
    massKg: number=0;
    name: string;
    totalCapacityKg: number;
    cargoItems: Cargo[] = [];
    astronauts: Astronaut[] = [];
    constructor(name: string, totalCapacityKg: number){
        this.name = name;
        this.totalCapacityKg = totalCapacityKg;
    }
    sumMass(items: IPayload[]): number{
        return items.reduce((totalMass, item) => totalMass + item.massKg, 0);
    }
    currentMassKg(): number{
        return this.sumMass([...this.cargoItems, ...this.astronauts]);
    }
    canAdd(item: IPayload): boolean{
        return this.currentMassKg() + item.massKg <= this.totalCapacityKg;
    }
    addCargo(cargo: Cargo): boolean{
        if (this.canAdd(cargo)) {
            this.cargoItems.push(cargo);
            return true;
            } 
        else {
            return false;
        }
    }
    addAstronaut(astronaut: Astronaut): boolean{
    if (this.canAdd(astronaut)) {
      this.astronauts.push(astronaut);
      return true;
    } else {
      return false;
    }
  }
}

const ast = new Astronaut(75, "John")
const cargo1 = new Cargo(60, "Food")
const rocket = new Rocket("Chandrayaan", 200)

console.log(rocket.addAstronaut(ast)); 
console.log(rocket.addCargo(cargo1)); 
console.log(rocket.currentMassKg());
